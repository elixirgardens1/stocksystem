* Contents
:CONTENTS:
- [[#System-Structure][System Structure]]
- [[#System-Design][System Design]]
- [[#System-Pages][System Pages]]
:END:

* Stock Control
The stock control system is a tool to track the products we are selling or have sold previously.

** System Structure
*** System Paths
**** The following paths in system need to be set to the relevant paths for your system, if deploying on FESP, they may need checking and uncommenting
***** QueryController
#+BEGIN_SRC php
// Located: PHPAPI/QueryController.php | Line: 815

$matrixDb = new PDO('sqlite:C:\inetpub\wwwroot\FESP-REFACTOR\FespMVC\Modules\Transparanecy\matrixCodes.db3');
#+END_SRC

***** StockPost
#+BEGIN_SRC php
// Located: PHPAPI/StockPost.php | Line: 2

// Define database
$db = new PDO('sqlite:stock_control.db3');
$path = 'Z:\FESP-REFACTOR\FespMVC\Modules\Transparanecy\matrixCodes.db3';
$matrixDB = new PDO('sqlite:' . $path);
#+END_SRC

***** axiosGet
#+BEGIN_SRC js
// Located: src/composables/axiosGet.js | Line: 5

const promise = axios.get(
    // URL below is for live system, change url when testing
    // `http://localhost/Ryan/Projects/stocksystem/PHPAPI/QueryController.php?${type}`
    `http://192.168.0.24:8080/stocksystem/PHPAPI/QueryController.php?${type}`
  );
#+END_SRC

***** axiosPost
#+BEGIN_SRC js
// Located: src/composables/axiosPost.js | Line: 4

try {
    axios.post(
      // URL below is for live system, change url when testing
      // "http://localhost/Ryan/Projects/stocksystem/PHPAPI/StockPost.php",
      "http://192.168.0.24:8080/stocksystem/PHPAPI/StockPost.php",
      request,
      config === false ? null : config
    );
  } catch (e) {
    return e;
}
#+END_SRC
*** Located On FESP
https://deepthought:8080/stocksystem:8080/dist/
*** Database
**** Server Path
X:\stocksystem\PHPAPI\stock_control.db3
**** Physical Path
C:\xampp\htdocs\stocksystem\PHPAPI\stock_control.db3
*** Dependencies
**** Transparency
***** MatrixCodes
located at Z:\FESP-REFACTOR\FespMVC\Modules\Transparanecy\matrixCodes.db3

The stock control is linked to @matrixCodes.db3 database. Stock control has the Transparency page which is used for the management of protected asins sold on amazon. New Codes are also inserted from this page and various stats about the asins are available.


** System Design
*** Languages
**** Php
PHP is used for retrieving and updating data in the backend databases, all of the php used within the project is located within the /PHPAPI folder located in the root of the stocksystem folder. Below I will discuss the purpose of all the php based files the system uses.
***** QueryController.php
This processes all the GET requests from the Vue frontend, the axiosGet.js file you can see below passes the a $_GET argument and the QueryController checks the argument passed and returns the relevant data.

#+BEGIN_SRC js
// Located: /src/composables/axiosGet.js
import axios from "axios";

export function axiosGet(type) {
    const promise = axios.get(
        `http://localhost/Ryan/Projects/stocksystem/PHPAPI/QueryController.php?${type}`
    );

    const dataPromise = promise.then((response) => response.data);

    return dataPromise;
}
#+END_SRC

The QueryController need to be improved by actually building a proper API controller for the basic queries that are common across all the pages on the system, for example, product information is used on the majority of pages so should be called once using a proper API call, rather than pulling everytime.
***** StockPost.php
Similar in structure to the QueryController, processes POST requests from the Vue frontend, the axiosPost.js file you can see below takes the url arguments and POSTED data and updates the backend databases.

#+BEGIN_SRC js
import axios from "axios";

export function axiosPost(request, config = false) {
  try {
    axios.post(
      // URL below is for live system, change url when testing
      "http://localhost/Ryan/Projects/stocksystem/PHPAPI/StockPost.php",
      // "http://192.168.0.24:8080/stocksystem/PHPAPI/StockPost.php",
      request,
      config === false ? null : config
    );
  } catch (e) {
    return e;
  }

  return true;
}
#+END_SRC

**** Vue
Vue is a frontend javascirpt framework, the entire frontend of the stock system uses the Vue framework, if you are unfamiliar with the framework, it is relatively easy to pick up and has great documentation [[https://v3.vuejs.org/guide/introduction.html]]. I will breifly discuss the structure of the system, for more information visit the documentaiton. Vue consists of one true html page, index.html located in public/html.index, all pages are dynamically rendered into that singular index.html file, the various pages for the system are located in the src/views folder. The home page, src/views/ViewStock.vue, is the default page that loads when the user opens the stock system, if the users navigates to another page using the nav bar, the Vue-Router lazy loads required src/view page and renders it into the index.html file.

#+CAPTION: View Pages Folder - Contains all the pages for the system
#+NAME: ViewPages
[[file:ViewPages.jpg]]
** System Pages
I will quickly describe each of the stocks systems pages, the intened usage and functionality of the page and note some design choices / issues within them
**** View Stock
View Stock page presents the user with all the products currently in FESP, it lists various information about each product, product name, supplier, rooms it is stored in the warehouse currently etc, which is also editable from this page. The page also acts as an ordering system, where the user can select products from the products table and add an order qty to an order form, the order from will only allow products from one supplier at a time, all products in the form are editable / deletable etc. When the user has made the order, they can submit the order by opening the form, checking the values they have input and submitting the form. Once a form is submitted it will create an order email template for the user to send to the supplier, and add the items to the @stock_control@ordered_stock table, the table will store the qty for each product the delivery date, placed date, the cost of the individual items etc. The @stock_control@ordered_stock table holds these orders until they are processed, at which point the qtys for each of the products will be added to the current stock for each of the products, all this functionality is handeled in the Pending Orders page which will be discussed in the Pending Orders section.
